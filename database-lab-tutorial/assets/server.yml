# Database Lab server configuration.

server:
  verificationToken: "secret_token"  # Warning! Insecure value – edit it.
  port: 2345

localUI:
  enabled: false
  # Docker image of the UI application.
  dockerImage: "postgresai/local-ui:latest"
  # Host or IP address, from which the Local UI container accepts HTTP connections.
  # By default, use a loop-back to accept only local connections.
  # The empty string means "all available addresses".
  host: "127.0.0.1"
  # HTTP port of the UI application. Default: 2346.
  port: 2346

global:
  # Database engine. Currently, the only supported option: "postgres".
  engine: postgres
  # Debugging, when enabled, allows seeing more in the Database Lab logs
  # (not PostgreSQL logs). Enable in the case of troubleshooting.
  debug: false
  # Contains default configuration options of the restored database.
  database:
    # Default database username that will be used for Postgres management connections.
    # This user must exist.
    username: postgres
    # Default database name.
    dbname: postgres
  # Telemetry: anonymous statistics sent to Postgres.ai.
  # Used to analyze DLE usage, it helps the DLE maintainers make decisions on product development.
  # Please leave it enabled if possible – this will contribute to DLE development.
  # The full list of data points being collected: https://postgres.ai/docs/database-lab/telemetry
  telemetry:
    enabled: false
    # Telemetry API URL. To send anonymous telemetry data, keep it default ("https://postgres.ai/api/general").
    url: "https://postgres.ai/api/general"

# Manages filesystem pools (in the case of ZFS) or volume groups.
poolManager:
  # The full path which contains the pool mount directories. mountDir can contain multiple pool directories.
  mountDir: /var/lib/dblab
  # Subdir where PGDATA located relative to the pool mount directory.
  # This directory must already exist before launching Database Lab instance. It may be empty if
  # data initialization is configured (see below).
  # Note, it is a relative path. Default: "data".
  # For example, for the PostgreSQL data directory "/var/lib/dblab/dblab_pool/data" (`dblab_pool` is a pool mount directory) set:
  #      mountDir:  /var/lib/dblab
  #      dataSubDir:  data
  # In this case, we assume that the mount point is: /var/lib/dblab/dblab_pool
  dataSubDir: data
  # Directory that will be used to mount clones. Subdirectories in this directory
  # will be used as mount points for clones. Subdirectory names will
  # correspond to ports. E.g., subdirectory "dblab_clone_6000" for the clone running on port 6000.
  clonesMountSubDir: clones
  # Unix domain socket directory used to establish local connections to cloned databases.
  socketSubDir: sockets
  # Directory that will be used to store observability artifacts. The directory will be created inside PGDATA.
  observerSubDir: observer
  # Snapshots with this suffix are considered preliminary. They are not supposed to be accessible to end-users.
  preSnapshotSuffix: "_pre"
  # Force selection of a working pool inside the `mountDir`.
  # It is an empty string by default which means that the standard selection and rotation mechanism will be applied.
  selectedPool: ""

# Configure database containers
databaseContainer: &db_container
  # Database Lab provisions thin clones using Docker containers and uses auxiliary containers.
  # We need to specify which Postgres Docker image is to be used for that.
  # The default is the extended Postgres image built on top of the official Postgres image
  # (See https://postgres.ai/docs/database-lab/supported_databases).
  # It is possible to choose any custom or official Docker image that runs Postgres. Our Dockerfile
  # (See https://gitlab.com/postgres-ai/custom-images/-/tree/master/extended)
  # is recommended in case if customization is needed.
  dockerImage: "postgresai/extended-postgres:14"
  # Container parameters, see
  # https://docs.docker.com/engine/reference/run/#runtime-constraints-on-resources
  containerConfig:
    # "shm-size": 1gb # default is 64mb, which is often not enough

# Adjust database configuration
databaseConfigs: &db_configs
  configs:
    # In order to match production plans with Database Lab plans set parameters related to Query Planning as on production.
    # shared_buffers: 1GB
    # shared_preload_libraries – copy the value from the source
    # Adding shared preload libraries, make sure that there are "pg_stat_statements, auto_explain, logerrors" in the list.
    # They are needed for query analysis and DB migration testing.
    # Note, if you are using PostgreSQL 9.6 and older, remove the logerrors extension from the list since it is not supported.
    # shared_preload_libraries: "pg_stat_statements, auto_explain, logerrors"
    # work_mem and all the Query Planning parameters – copy the values from the source.
    # Detailed guide: https://postgres.ai/docs/how-to-guides/administration/postgresql-configuration#postgresql-configuration-in-clones
    # work_mem: "100MB"
    # ... put Query Planning parameters here

provision:
  <<: *db_container
  # Pool of ports for Postgres clones. Ports will be allocated sequentially,
  # starting from the lowest value. The "from" value must be less than "to".
  portPool:
    from: 6000
    to: 6100
  # Use sudo for ZFS/LVM and Docker commands if Database Lab server running
  # outside a container. Keep it "false" (default) when running in a container.
  useSudo: false
  # Avoid default password resetting in clones and have the ability for
  # existing users to log in with old passwords.
  keepUserPasswords: false

cloning:
  # Host which will be specified in clone connection info.
  accessHost: "127.0.0.1"

  # Auto-delete clones after the specified minutes of inactivity.
  # 0 - disable automatic deletion.
  maxIdleMinutes: 20

debug: true

